#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('event.notifier.agentsoncloud.com:server');
var http = require('http');
const parameters = require("../config/parameters");
const logger = require("../utils/logger");
const knex = require("../config/database");
const kafkaConsumerRunner = require("../kafka/consumer")
const { init: kafkaInit } = require("../kafka/init")

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(parameters.app.port);
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, async () => {
  try {

    logger.info(`http://localhost:${port}`);
    knex.raw("select version()").then(() => {
      logger.info(`database connected successfully`);
    })
    await kafkaInit()
    logger.info(`Kafka connection initiated successfully`);
    await kafkaConsumerRunner()
    logger.info(`Kafka consumer created successfully`);


  } catch (error) {
    logger.emergency("error connecting to database server, error message: " + error.message);
  }


  // await sequelize.sync({ alter: true });

  // logger.info("Db Synced");
});
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
